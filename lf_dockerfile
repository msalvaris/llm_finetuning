# Start from the NVIDIA CUDA base image with CUDA, cuDNN
FROM nvidia/cuda:12.2.0-devel-ubuntu22.04 AS dev

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get clean && \
    apt-get update --fix-missing &&\
    apt-get install -y software-properties-common &&\ 
    rm -rf /var/lib/apt/lists/* \
    apt add-apt-repository ppa:deadsnakes/ppa && \
    apt update -y && \
    apt-get -y upgrade && \
    apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    curl \
    ffmpeg \
    git \
    libatlas-base-dev \
    libcgal-dev \
    libboost-filesystem-dev \
    libboost-graph-dev \
    libboost-program-options-dev \
    libboost-system-dev \
    libboost-test-dev \
    libeigen3-dev \
    libflann-dev \
    libfreeimage-dev \
    libgflags-dev \
    libglew-dev \
    libgoogle-glog-dev \
    libhdf5-dev \
    libmetis-dev \
    libprotobuf-dev \
    libqt5opengl5-dev \
    libsqlite3-dev \
    libsuitesparse-dev \
    protobuf-compiler \
    python-is-python3 \
    python3 \
    python3.10-dev \
    python3.10-dev \
    python3-pip \
    qtbase5-dev \
    sudo \
    tmux \
    wget && \
    rm -rf /var/lib/apt/lists/*

RUN ldconfig /usr/local/cuda-12.2/compat/
RUN curl -sSL https://bootstrap.pypa.io/get-pip.py | python3.10 -
# cuda arch list used by torch
ARG torch_cuda_arch_list='7.5'
ENV TORCH_CUDA_ARCH_LIST=${torch_cuda_arch_list}
# max jobs used by Ninja to build extensions
ARG max_jobs=2
ENV MAX_JOBS=${max_jobs}
# number of threads used by nvcc
ARG nvcc_threads=8
ENV NVCC_THREADS=$nvcc_threads
# make sure punica kernels are built (for LoRA)
ENV VLLM_INSTALL_PUNICA_KERNELS=1

# 2) install cuda and cudnn
# RUN apt-key del 7fa2af80
# ADD https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb .
# RUN dpkg -i cuda-keyring_1.1-1_all.deb
# RUN apt update -y && apt install -y cuda-toolkit-12-1 libcudnn9-cuda-12 libcudnn9-dev-cuda-12
##RUN apt-get install -y linux-headers-$(uname -r)

# 3) pre-install dependencies
RUN python3.10 -m pip install torch==2.2.0 torchvision torchaudio deepspeed==0.13.1 transformers datasets 
RUN python3.10 -m pip install vllm==0.3.3 xformers

WORKDIR /app

# 4) install requirements
RUN git clone https://github.com/hiyouga/LLaMA-Factory.git --single-branch /app/LLaMA-Factory && \
    cd LLaMA-Factory && \
    python3.10 -m pip install -r requirements.txt

# 6) clean to shrink image size
RUN python3.10 -m pip cache purge
RUN rm -rf /var/cache/apt/*
RUN rm -rf /usr/lib/nsight-compute /usr/lib/nsight-systems
RUN rm -rf /usr/lib/x86_64-linux-gnu/nsight*
RUN rm -rf /usr/share/man